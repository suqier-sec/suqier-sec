<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>suqier&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-28T14:34:31.511Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>suqier</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>迁移电脑环境疑难杂症记录</title>
    <link href="http://example.com/2022/03/28/%E8%BF%81%E7%A7%BB%E7%94%B5%E8%84%91%E7%8E%AF%E5%A2%83%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E8%AE%B0%E5%BD%95/"/>
    <id>http://example.com/2022/03/28/%E8%BF%81%E7%A7%BB%E7%94%B5%E8%84%91%E7%8E%AF%E5%A2%83%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%E8%AE%B0%E5%BD%95/</id>
    <published>2022-03-28T13:46:16.000Z</published>
    <updated>2022-03-28T14:34:31.511Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>笔记本的性能（内存&#x2F;硬盘）满足不了多开虚拟机的需求，奈何12代笔记本全是ddr5内存，索性一步到位组个台式。</p><p><strong>装机时间：2022年3月中旬</strong></p><table><thead><tr><th align="center"><strong>配置单</strong></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20220327213311.png?x-oss-process=style/suqier-logo" style="zoom:33%;" /></td></tr></tbody></table><p><strong>配置解析</strong></p><ul><li><p>CPU主板内存三件套</p><ul><li>没有超频需求且需要核显度过显卡高价期，遂选择<code>i7-12700</code></li><li>不超频的话<code>b660m wifi</code>的供电带<code>i7-12700</code>搓搓有余，主板代wifi后缀指的是主板自带无线网卡功能</li><li>内存条选择3200频率是因为<code>i7-12700</code>锁电压，超不了内存，也不支持3600频率</li></ul></li><li><p>电源硬盘</p><ul><li>650w电源是考虑到后续可能需要加独显预留的</li><li>512g固态作为系统盘、软件盘，选了pcie4.0固态，系统读写拉满</li><li>2T固态作为数据盘，对读写没有需求，性价比高就完事了。2T机械为垃圾盘，存些乱七八糟的东西</li></ul></li></ul><h3 id="DP线无信号"><a href="#DP线无信号" class="headerlink" title="DP线无信号"></a>DP线无信号</h3><p><strong>起因</strong></p><p>为什么要用dp线？印象中的hdmi好像最大支持4k30hz就换了dp线，但是被dp线坑了个半死，两周后写下这个文章依旧认为dp线就是<strong>最垃圾</strong>的设计，没有之一</p><ul><li>dp线拔插问题，不同于其他类型的传输线，大力出奇迹，就没有拔不出来的。但dp线需要一边摁一下插头上的卡扣一边用力才能拔出来，同时很多显示器接口位置都是很挤，手指完全使不上劲，导致拔个线比爬楼梯还累</li><li>起初dp线正常显示，调整主机位置，拔线再接入显示无信号，怀疑是主机问题，但hdmi线正常显示。原因不详，解决办法参考<a href="https://tieba.baidu.com/p/5242217530">链接1</a>，<a href="https://zhuanlan.zhihu.com/p/466826180">链接2</a>。</li><li>根据上面的方法还是没有解决，换上hdmi线凑合用，查看显示器配置发现尽然是4k60hz，查了一下hdmi1.4仅支持4k30hz, 但hdmi2.0已经支持4k60hz了</li></ul><h3 id="系统无法完成安装"><a href="#系统无法完成安装" class="headerlink" title="系统无法完成安装"></a>系统无法完成安装</h3><p><strong>问题</strong></p><table><thead><tr><th align="center">重装系统加载到一半显示windows无法完成安装，如下图（没拍照，随便找了个网图）</th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20220327231857.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table><p><strong>解决</strong></p><ul><li>安装网上的解决方法<a href="https://www.cnblogs.com/hanggegege/p/6863938.html">参考</a>，修改后一直转圈圈，并不好使。</li><li>后面重新装了一下系统就没有弹出这个页面了，原因：<strong>装机的时候分区表类型选择了MBR类型，修改成GPT后就正常了</strong><ul><li>硬盘分区格式为MBR格式，启动模式为Legacy，即传统引导方式。MBR支持win7版本系统以下的32位和64位。</li><li>硬盘分区格式为GUID（GPT）格式，启动模式为UEFI。GUID(GPT)支持win7版本以上的64位系统（不支持32位系统）,比如win8、win10、win11系统。</li></ul></li></ul><h3 id="没有网络"><a href="#没有网络" class="headerlink" title="没有网络"></a>没有网络</h3><p><strong>问题</strong></p><p>上不了网，系统没带有无线网卡驱动，家里没有网线</p><p><strong>解决</strong></p><ul><li><p>找个驱动软件离线版打上驱动，刚开始考虑到了鲁大师和驱动精灵，但并不好使好像没识别处网卡，没打上。还被捆绑了，最后还重装了系统。。。</p></li><li><p>usb共享网络打上驱动，可行，但是太慢，中途放弃了。</p></li><li><p>通过笔记本到官网找到对应产品驱动，下载到U盘烤给台式机。</p><table><thead><tr><th align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20220327234457.png?x-oss-process=style/suqier-logo" style="zoom: 33%;" /></th></tr></thead></table></li></ul><h3 id="虚拟机文件共享"><a href="#虚拟机文件共享" class="headerlink" title="虚拟机文件共享"></a>虚拟机文件共享</h3><blockquote><p>之前一直看到有人用virtualbox的虚拟机宿主机进行文件共享，vmware应该也有类似功能，但好像没看到有人说</p></blockquote><p>参考，<a href="https://jingyan.baidu.com/article/0aa22375ef3962c8cd0d6400.html">链接</a></p><ul><li><p>实现方式</p><table><thead><tr><th align="center">虚拟机设置–&gt; 选项–&gt; 共享文件夹–&gt;添加–&gt;选择目录–&gt;总是启用–&gt;在windows客户机中映射为网络驱动器</th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20220328001024.png?x-oss-process=style/suqier-logo" style="zoom:50%;" /></td></tr><tr><td align="center"><strong>网络位置就多了个磁盘了</strong></td></tr><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20220328001204.png?x-oss-process=style/suqier-logo" style="zoom:50%;" /></td></tr></tbody></table></li><li><p>开始没有勾选上<code>在windows客户机中映射为网络驱动器</code>需要通过开启计算机的网络共享，才找到共享盘符。映射后就跳过了这一步。</p></li><li><p><strong>还以为是通过网络实现的共享的，但尝试把虚拟机网卡删除后文件共享仍然正常使用，实测没有网络也能使用。</strong></p></li></ul><h3 id="系统激活"><a href="#系统激活" class="headerlink" title="系统激活"></a>系统激活</h3><p><strong>通过KMS激活</strong></p><ul><li><p>管理员运行powershell，分别运行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">slmgr /upk <span class="comment"># 卸载密钥</span></span><br><span class="line">slmgr /ipk NRG8B<span class="literal">-VKK3Q-CXVCJ-9G2XF-6Q84J</span> <span class="comment"># 绑定密钥，该密钥为win10专业工作站版</span></span><br><span class="line">slmgr /ipk FJ82<span class="built_in">H</span><span class="literal">-XT6CR-J8D7P-XQJJ2-GPDD4</span> <span class="comment"># win7专业版密钥</span></span><br><span class="line">slmgr /skms  skms.netnr.eu.org <span class="comment"># 设置密钥分发服务器</span></span><br><span class="line">slmgr /ato <span class="comment"># 激活</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">不同版本操作系统绑定的密钥不同</th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1647439688699-5552d743-4132-4a98-b2d5-faf46a8e9d8c.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table></li><li><p>查询激活</p><table><thead><tr><th align="center"><code>使用slmgr /dli查询激活</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20220328002958.png?x-oss-process=style/suqier-logo" style="zoom: 50%;" /></td></tr></tbody></table><p><strong>offic部署及激活</strong></p><p>没截图，简单记录一下安装步骤</p></li><li><p>通过<code>office tools plus</code> 安装，<a href="https://otp.landian.vip/zh-cn/">官网</a></p><ul><li>部署–&gt;选择版本–&gt;选择需要安装应用–&gt;部署模式选择<code>office tools plus</code>–&gt;开始部署</li><li>激活–&gt;选择版本（这里的版本需要对应上面安装的版本）–&gt; 安装许可证</li></ul></li></ul><h3 id="EDGE浏览器菜单变透明"><a href="#EDGE浏览器菜单变透明" class="headerlink" title="EDGE浏览器菜单变透明"></a>EDGE浏览器菜单变透明</h3><h4 id="场景复现"><a href="#场景复现" class="headerlink" title="场景复现"></a>场景复现</h4><blockquote><p>在Vmware装完虚拟机后更新系统发现edge浏览器的菜单和任务栏变成半透明看不清了</p><p>初步怀疑可能是windows11系统bug，导致edge部分样式渲染有问题</p></blockquote><table><thead><tr><th align="center"><code>场景如下</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1647415514627-5eeca943-b6d2-41c8-b35b-f6c817c43fe1.png?x-oss-process=style/suqier-logo" style="zoom: 50%;" /></td></tr><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1647415523702-85fd9bb6-2eed-4fa2-be0e-559158eb1030.png?x-oss-process=style/suqier-logo" style="zoom:50%;" /></td></tr></tbody></table><h4 id="版本一"><a href="#版本一" class="headerlink" title="版本一"></a>版本一</h4><p><strong>看到同样问题的社区求助，跳转<a href="https://answers.microsoft.com/zh-hans/microsoftedge/forum/all/edge%E8%8F%9C%E5%8D%95%E5%8F%98%E6%88%90%E5%AE%8C/5b723c72-8537-4b30-b9d4-b04546bf1008">链接</a></strong></p><blockquote><p>官方回复说将设置改成默认，但未看到具体设置<br>在官方答复上边看到一个点，疑似说该问题由于默认开启了windows11样式引起的</p></blockquote><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>该方法并不能完全解决半透明问题，仅能将设置菜单恢复</p><table><thead><tr><th align="center"><code>浏览器搜索栏：edge://flages，打开之后搜索windows11</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1647415990450-33fa974e-94d0-420b-8cd5-b93a443d85e4.png?x-oss-process=style/suqier-logo" style="zoom: 33%;" /></td></tr></tbody></table><table><thead><tr><th align="center"><code>将匹配出来的两个样式全部设置为disalbe</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1647416127287-79e51a4f-f067-43fa-8251-858af618e226.png?x-oss-process=style/suqier-logo" style="zoom:33%;" /></td></tr></tbody></table><table><thead><tr><th align="center"><code>重启浏览器,也只是实现了设置菜单的正常化，锦集功能点还是透明的</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1647417500030-92dfa259-8e64-4ca7-bc2a-fc6cf785a352.png?x-oss-process=style/suqier-logo" style="zoom: 50%;" /></td></tr></tbody></table><h4 id="版本二"><a href="#版本二" class="headerlink" title="版本二"></a>版本二</h4><blockquote><p>想起edge也是基于Chromium实现的，遂找了一下chrome有没有类似问题看到了一个链接，说明了该问题是由于开启硬件加速引起的，<a href="https://zhuanlan.zhihu.com/p/86753926">链接</a></p></blockquote><table><thead><tr><th align="center">打开<code>edge://falgs</code>–&gt; <code>Reset all</code>还原所有设置</th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1647417829585-f02b0a50-272d-42e8-afed-0392a755a1e3.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table><h5 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h5><table><thead><tr><th align="center"><code>在设置中将硬件加速关闭</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1647417763075-03111319-e62b-42a3-9a52-b5b1f33afd13.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table><table><thead><tr><th align="center"><code>重启浏览器，所有透明效果恢复正常</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1647417926885-2197e853-951e-416d-9a49-b9140fc2ce73.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table><ul><li>参考<a href="https://lexsion.com/index.php/archives/254/">链接1</a>，<a href="https://lexsion.com/index.php/archives/254/">链接2</a></li></ul><h3 id="win7无法更新"><a href="#win7无法更新" class="headerlink" title="win7无法更新"></a>win7无法更新</h3><p><strong>从msdn下载了win7 sp1镜像后无法使用windows udpate功能，错误代码80072efe（好像是这个？忘记截图了）</strong></p><p><strong>解决</strong></p><ul><li>需要手动打上两个补丁，离线下载安装后就可以在线检查更新了<ul><li><a href="http://download.windowsupdate.com/d/msdownload/update/software/updt/2016/05/windows6.1-kb3125574-v4-x64_2dafb1d203c8964239af3048b5dd4b1264cd93b9.msu">kb3125574 x64</a></li><li><a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=46817">kb3020369</a></li></ul></li></ul><blockquote><p>该问题疑似由于微软更新服务器升级使用了https协议，但旧版的系统还是http协议，导致无法检查更新。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;笔记本的性能（内存&amp;#x2F;硬盘）满足不了多开虚拟机的需求，奈何12代笔记本全是ddr5内存，索性一步到位组个台式。&lt;/p&gt;
&lt;p&gt;&lt;st</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>spring boot heapdump获取脱敏信息</title>
    <link href="http://example.com/2022/02/24/spring_boot_heapdump_%E8%8E%B7%E5%8F%96%E8%84%B1%E6%95%8F%E4%BF%A1%E6%81%AF/"/>
    <id>http://example.com/2022/02/24/spring_boot_heapdump_%E8%8E%B7%E5%8F%96%E8%84%B1%E6%95%8F%E4%BF%A1%E6%81%AF/</id>
    <published>2022-02-24T08:35:34.000Z</published>
    <updated>2022-02-25T10:38:24.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p><strong>heapdump：</strong>  springboot的叫法，实际上是jvm运行时内存的一份快照，利用它可以分析是否存在内存浪费，可以检查内存管理是否合理，当发生OOM的时候，可以找出问题的原因。</p></blockquote><p><strong>应用场景：</strong></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在利用springboot的系统应用中，访问 /env或/actuator/heapdump 接口时，会将password、key等属性的值用 ******号显示出来，以防止敏感信息的泄露。</span><br><span class="line"></span><br><span class="line">可通过mat打开jvmdump文件使用OQL（对象查询语言）可对敏感字段进行查询，获取脱敏的密码</span><br></pre></td></tr></table></figure><p><strong>解密前提：</strong></p><ul><li><p>Springboot 1.x中可GET 请求访问 <code>/heapdump</code></p></li><li><p>Springboot 2.x中可GET 请求访问 <code>/actuator/heapdump</code></p></li></ul><h3 id="MAT"><a href="#MAT" class="headerlink" title="MAT"></a>MAT</h3><blockquote><p><strong>MAT：</strong>（全称Eclipse Memory Analyzer）</p></blockquote><ul><li><p>下载： <a href="http://www.eclipse.org/downloads/download.php?file=/mat/1.12.0/rcp/MemoryAnalyzer-1.12.0.20210602-win32.win32.x86_64.zip">链接</a>，本地解压打开 <code>MemoryAnalyzer.exe</code></p></li><li><p>排坑</p><ul><li>java版本无法满足</li></ul><table><thead><tr><th align="center"><code>解决方法，更换jdk11及以上版本</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20220225182241.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table><ul><li>更换jdk后任然无法运行</li></ul><table><thead><tr><th align="center"><code>jre环境下无法运行</code> <code>将java运行变量由JAVA_HOME/jre/bin 改成JAVA_HOME/bin</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1645776375671-d4aa0709-0e0e-4475-a81a-d2c8e332ea13.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table></li></ul><h3 id="导入获取脱敏信息"><a href="#导入获取脱敏信息" class="headerlink" title="导入获取脱敏信息"></a>导入获取脱敏信息</h3><ul><li><p>扫描发现<code>heapdump</code>文件</p><table><thead><tr><th align="center">下载到本地</th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1645774840037-a4d4cbae-8c08-46e7-87f9-c1aea20b324e.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table></li><li><p>打开 <code>file --&gt;open heapdump file --&gt; heapdump文件 --&gt;finish </code></p><table><thead><tr><th align="center"><code>打开heapdump后</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1645776821495-5dce46af-36ac-4f3a-a7f6-c58272d27b5b.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table></li><li><p>运行OQL语句查询敏感字段</p><ul><li>spring boot 1.x中heapdump 查询结果存储在 <code>java.util.Hashtable$Entry</code>  实例的键值对中，查询语法为：</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * from org.springframework.web.context.support.StandardServletEnvironment</span><br><span class="line"><span class="keyword">select</span> * from java.util.Hashtable$Entry <span class="keyword">x</span> WHERE (toString(x.key).contains(<span class="string">&quot;password&quot;</span>))</span><br></pre></td></tr></table></figure><ul><li>spring boot 2.x中heapdump 查询结果存储在 <code>java.util.LinkedHashMap$Entry</code>  实例的键值对中，查询语法为：</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * from java.util.LinkedHashMap$Entry <span class="keyword">x</span> WHERE (toString(x.key).contains(<span class="string">&quot;password&quot;</span>))</span><br></pre></td></tr></table></figure></li><li><p>查询脱敏信息</p><ul><li>这里为spring boot 2.x 版本</li></ul><table><thead><tr><th align="center"><code>运行结果</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1645777534043-82ba04a0-365d-457c-8fb9-01b70aa71377.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table><ul><li>展开信息</li></ul><table><thead><tr><th align="center"><code>找到druid的密码</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/1645777762267-ed809f6b-0977-4d80-86e4-63c33dbef3d6.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table><ul><li>&#x2F;env中如果存在多个脱敏字段需要逐个展开寻找</li><li>参考链接 <a href="https://landgrey.me/blog/16/">文章</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;heapdump：&lt;/strong&gt;  springboot的叫法，实际上是jvm运行时内存的一份</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>送东阳马生序</title>
    <link href="http://example.com/2022/02/21/%E9%80%81%E4%B8%9C%E9%98%B3%E9%A9%AC%E7%94%9F%E5%BA%8F/"/>
    <id>http://example.com/2022/02/21/%E9%80%81%E4%B8%9C%E9%98%B3%E9%A9%AC%E7%94%9F%E5%BA%8F/</id>
    <published>2022-02-21T09:15:55.000Z</published>
    <updated>2022-02-21T10:07:39.037Z</updated>
    
    <content type="html"><![CDATA[<p>宋濂　明</p><p>余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。</p><p>既加冠，益慕圣贤之道，又患无硕师、名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。</p><p>当余之从师也，尝负笈曳屣，行深山巨谷中。穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四肢僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴珠缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，煜然若神人。余则缊袍敝衣处其间，略无慕艳意。以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？</p><p>今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵《诗》《书》，无奔走之劳矣；有司业、博士为之师，未有问而不告、求而不得者也；凡所宜有之书，皆集于此，不必若余之手录、假诸人而后见也。其业有不精、德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！</p><p>东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达；与之论辩，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣。其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知予者哉！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;宋濂　明&lt;/p&gt;
&lt;p&gt;余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。&lt;/p&gt;
&lt;p&gt;既加冠，益慕圣贤之道，又患无硕师、名人与游，尝趋百里外，从乡之先</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2021年度总结</title>
    <link href="http://example.com/2022/01/06/2021%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/01/06/2021%E6%80%BB%E7%BB%93/</id>
    <published>2022-01-05T19:45:16.000Z</published>
    <updated>2022-02-21T17:28:45.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是一份迟来的年终总结，现在时间是2022年1月6日凌晨1点。在解决完所谓的琐事后，最终说服自己坐到了电脑面前，将2021的故事写到纸上。如果说需要一个关键词来形容着一年的话，这个词应该是“杂乱无章”了。在2021年，工作上，从校园步入了职场，完成了从一名学生到打工人的转变。生活上，艰难且坎坷的熬过了水逆期。得以万幸，像是一艘充满补丁却昂扬追求远洋的帆船，纵是使狂风暴雨，但终究还是又苟延残喘了一年。</p><h2 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h2><p>得益于这个“全民创业”的时代，加上在2020年11月的不断碰壁，在元旦过后，顺利办理了入职，开始了自己的安全之旅。将2021年的按照每四个月分为三个阶段：</p><h5 id="第一阶段"><a href="#第一阶段" class="headerlink" title="第一阶段"></a>第一阶段</h5><p>在年前上手了几个项目，但在未出学校之前的知识体系明显不足以支撑自己完成工作。每一天都在痛苦的想着今天该用什么东西才能混过去？好在之前捣鼓过漏扫，遂将awvs带到了项目中，效果还不错。碰巧几次漏扫都有高危产出，这段时间awvs一度被当成了救世主，时至今日回忆起当时看到高危时的狂热依旧清晰。然后漏扫给我带来的这份快乐在年后结束了，因为在年后接触到了职业生涯中的第一次行业攻击演练，记得没错的话应该是医疗行业，也接触到了一个让脚本小子快乐消失的产品“waf”。漏扫无果，又回到了对着显示器发呆痛苦万分的日子。漏扫之后让我得以继续混项目的就是Nday了，第一个nday就是forti sslvpn凭据泄露，通过登录vpn接入了自己的第一个内网。尝到甜头过后，在后续的工作早早的养成了只要是通用产品就找nday的习惯。在四月初，参加了自己职业生涯上的第一次正式攻击队项目，见识到了业界内一线厂商红队的实力，0day的出现让自己初次意识到了公司之间资源的差距与投入是多么重要的。四月中，以指挥岗的身份参加了某省国家hw值守，也同样是第一次。但防守岗上手并不是吃力，从前期的各厂商工作安排，资产梳理自查修复等，到中间的正式演习阶段完全没有压力。期间完成了多起应急响应，异常外联，挖矿蠕虫，服务入侵等。不过比较操蛋的就是结束后的汇报了，各种值守报告，技战法等。</p><h5 id="第二阶段"><a href="#第二阶段" class="headerlink" title="第二阶段"></a>第二阶段</h5><p>如果说第一部分是赶鸭子上架，那第二部分则是船到桥头自然直了。在这个阶段开始能够独立完成部分项目，交付的时候有了自己和客户的初次沟通。但刚开始交流整体下来不太理想，回去自己查阅资料后又和锋哥取经，带着他的说辞，重新去和客户交流，扫清两者之间的沟通障碍后一拍即合，或许这就是语言的魅力？这个阶段得以让我完成项目的就是反序列化及独立漏洞挖掘了，反序列化占比还是较高，尤其是靠着shiro&#x2F;fastjson&#x2F;weblogc三兄弟混了数个攻击队项目，几乎每一场都有产出。而漏洞挖掘呢，就比较偏向一些注入，未授权，弱口令等能直接拿权限的漏洞了，或许是因为hw参加的多了，以至于后续尝试挖src的时候忽略了好多非获取权限类漏洞。在这一阶段，探索到了内网渗透，很早就听说，但却一直没有去尝试，其实就是hw内网分值占比太高了，不得不重视。期间还有一些杂乱的差事，暗网数据挖掘，给甲方做培训，由于疫情原因，去顶替乙方人员参加等保会议等。工作内容的杂乱，带来的后果就是感觉自己在虚度光阴，即使做的不错，但它并不是我最想做的工作，所以一直在选择离职的边缘徘徊。</p><h5 id="第三阶段"><a href="#第三阶段" class="headerlink" title="第三阶段"></a>第三阶段</h5><p>在上一阶段过后，有了自我独立知识体系具备一定能力后，出于某些原因果断裸辞。选择离开了自己的第一家公司，到了更大的舞台，上百次的投递，几十次的面试，最终顺利找到了合适的坑位。在这一阶段，如果要说技术层面上的提升，可能不太大，能提的点就是n多次的面经了，果然面的多常规问题都能脱口而出了。不过一些大场项目场景中的难题还是很具备难度。面试结束后，到北京某小公司，开启了短暂的“北漂”，但明显安服岗和自己的预期不太一样，且接受不了对自己的妥协，最终在大半个月还是离开了北京。还有一点就是接触到了业内不同的环境。见识到了不同岗位的差距，意识到了一个好的部门到底有多重要！直到投入大厂的怀抱之后，我对“部门”这个词才有直观的印象，一个氛围很好的部门，在给一个职场新人带来的提升自然不言而喻。业内一线解决方案，以及最前沿技术分享，在享受到这个福利的同时，又让我出现和第一阶段相似的令我欣喜若狂的压迫感。</p><h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>这一年被打上“杂乱无章”标签时，可以说是有生活上的一大部分原因。浑浑噩噩一整年，从开始试图改变水逆状态，到最后内心发生动摇直接摆烂，怀疑自我。以至于逐渐妥协用“活着就行”的想法不断安慰自己，明显和最初的预期相向而行越走越远了。纵观这一年，用之前收藏的一个句子来形容便是“消极的满足，且没有动力持续驱动”。所以在新的一年，还是希望自己能够积极探索，跳出这个温水煮青蛙的陷阱。</p><h5 id="读书写作"><a href="#读书写作" class="headerlink" title="读书写作"></a>读书写作</h5><p>起初不管是生活还是工作都有做记录，日记虽然像流水账一样但也更新了大半年，然后这份记录是在九月开始摆烂后断线了。技术上的东西写的不是很多，去年在学校花了一周经历捣鼓的博客，加上平时也有一些写笔记的习惯，原本以为能坚持更新的，后面嫌麻烦便关停了。还是归于太浮躁了，有时蹦出一些观点或者感想，想要敲动键盘记录下来，结果总是能找到理由宽慰自己，拖着拖着便索然无味了。但是这个博客，在年底心态逐渐发生改变的同时，自己又有了一些记录生活的想法，预计是在明年第一季度重启。阅读方面的话，书籍几乎是没有，但重新整理了众多技术方面知识获取渠道，使其不再凌乱。而生活，想法等方面，也多次借鉴前浪和大哥们的经验，相较于年初变化还是挺大的。</p><h5 id="运动健康"><a href="#运动健康" class="headerlink" title="运动健康"></a>运动健康</h5><p>由于第三阶段的摆烂，生活彻底放纵变得凌乱不堪，日夜颠倒，整个人变得千疮百孔。生理上饱受胃病折磨，在某些紧张场景或者进食过度便出现呕吐感。得益于部门这边的氛围，以及工作制度上的方便，在年底的最后一天重新加入了跑步打卡大军。常常想到，在后续的日子有人监督的情况下，应该能够坚持下去的，但事实上身体已经敲响警钟，运动对我来说，已经从一种期许变成了生活中必不可少的一部分。嗯，相较于生理方面的问题，精神上的问题也同样亟待解决。经常性的失眠，还是因为太浮躁所导致，每每躺下，总是无法静下心来，睡眠从最开始的解脱已经变成了一种煎熬。</p><h5 id="金融理财"><a href="#金融理财" class="headerlink" title="金融理财"></a>金融理财</h5><p>虽然这已经是我至16岁经济独立以来的第三个年头了，但也没有很大的精力想往这方面投入。自疫情以来，美联储不断印钞加息，全球经济氛围甚至低迷到弥漫着让人感觉快要爆发金融危机的一丝气息。然后大A呢，整体情况还是在3600左右徘徊，去年错过了白酒医药，今年又没吃上新能源和光伏的红利。观望了一年的宁德时代，截至12月31日收盘，一年下来实现了高达67%的涨幅，总市值达1.3w亿。一年时间上升到A股第三，同样没上车。还有一个就是虚拟货币了，在年初一大批韭菜涌入了虚拟货币市场，这其中自己必然也参与了进去。彷佛回到了2020年，大爷大妈都知道买基金能赚钱的市场，如同大A八九月份的高点崩盘一样，在大天朝各种政策打压下，在五月中，虚拟货币崩盘腰斩了。肉没吃到，挨打一顿不少，最后装死到十月份赚回本金就跑了，但也错过了后续翻倍的机会。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>其实今年一直在思考的一个问题是，以后我是否会像大众一样，让生活推着自己走，化身为时代的一粒尘埃、随波逐流、衣食无忧、辛勤工作、买房生子、养家糊口，但终究没能给这个社会带来改变？如果想要做更多贡献，那么该从哪里开始？在大天朝，想要违逆命运安排好的道路，难度是极大的，那么应该要怎样做才能继续保持着，听从自己内心，做一个命运逆行者的勇气？</p><p>2021无疑是波涛汹涌、无比艰难的一年。然而，2022，依旧无人知晓。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这是一份迟来的年终总结，现在时间是2022年1月6日凌晨1点。在解决完所谓的琐事后，最终说服自己坐到了电脑面前，将2021的故事写到纸上。如</summary>
      
    
    
    
    
    <category term="writing" scheme="http://example.com/tags/writing/"/>
    
  </entry>
  
  <entry>
    <title>Python+Scapy实现TCP端口扫描</title>
    <link href="http://example.com/2020/09/15/Python+Scapy_%E5%AE%9E%E7%8E%B0TCP%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <id>http://example.com/2020/09/15/Python+Scapy_%E5%AE%9E%E7%8E%B0TCP%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</id>
    <published>2020-09-15T06:19:48.000Z</published>
    <updated>2022-02-21T13:41:29.181Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Scapy-构造TCP数据包实现扫描端口"><a href="#Python-Scapy-构造TCP数据包实现扫描端口" class="headerlink" title="Python+Scapy 构造TCP数据包实现扫描端口"></a>Python+Scapy 构造TCP数据包实现扫描端口</h1><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><ul><li>面向连接的：使用TCP协议通信的双方必须先建立连接，然后才能开始数据的读写，TCP连接是全双工的，即双方的数据读写可以通过一个连接进行。完成数据交换之后，通信双方都必须断开 连接以释放资源。TCP协议的这种连接是一对一的，所以基于广播和多播（目标是多个主机地址) 的应用程序不能使用TCP。而无连接协议UDP则非常适合于广播和多播。</li><li>流式服务：TCP的字节流服务的表现形式就体现在，发送端执行的写操作数和接收端执行的读操作次数之间没有任何数量关系，当发送端应用程序连续执行多次写操作的时，TCP模块先将这些数据放入TCP发送缓冲区中。当TCP模块真正开始发送数据的时候，发送缓冲区中这些等待发送的数据可能被封装成一个或多个TCP报文段发出。</li><li>TCP通过检验和，序列号，确认应答，重发控制，连接管理以及窗口控制等机制实现可靠性传输。</li></ul><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><ul><li>所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发<br>送3个包。三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，<br>交换 TCP 窗口大小信息。在 socket 编程中，客户端执行 connect() 时。将触发三次握手。</li><li>第一次握手(SYN&#x3D;1, seq&#x3D;x):客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器<br>的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。<br>发送完毕后，客户端进入 SYN_SEND 状态。</li><li>第二次握手(SYN&#x3D;1, ACK&#x3D;1, seq&#x3D;y, ACKnum&#x3D;x+1):服务器发回确认包(ACK)应答。即 SYN 标志位和<br>  ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)<br>  设置为客户的 ISN 加1，即X+1。 发送完毕后，服务器端进入 SYN_RCVD 状态。</li><li>第三次握手(ACK&#x3D;1，ACKnum&#x3D;y+1)客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，<br>  并且把服务器发来ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1发送完<br>  毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束。</li></ul><table><thead><tr><th align="center"><code>三次握手图视</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200928190555.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table><h3 id="TCP类字段解释"><a href="#TCP类字段解释" class="headerlink" title="TCP类字段解释"></a>TCP类字段解释</h3><ul><li>在scapy中查看TCP类可用的函数<table><thead><tr><th align="center"><code>使用ls(xxx)可以来查看某个协议类中的函数</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200928160856.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table></li></ul><table><thead><tr><th align="center">字段</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">sport</td><td align="center">源端口，接受数据类为整数型</td></tr><tr><td align="center">dport</td><td align="center">目的端口，接受数据类为整数型</td></tr><tr><td align="center">seq</td><td align="center">tcp三次握手中的序号，如果刚发送TCP数据包，从第0位开始则seq为0</td></tr><tr><td align="center">ack</td><td align="center">同上，如果是第一个数据包的话，则ack同样为零</td></tr><tr><td align="center">flags</td><td align="center">TCP标志位，总共有六个ACK&#x2F;SYN&#x2F;RST&#x2F;URG&#x2F;PSH&#x2F;FIN, 关于标志位的介绍可以看这里<a href="https://blog.csdn.net/qq_38323666/article/details/85338477">https://blog.csdn.net/qq_38323666/article/details/85338477</a></td></tr><tr><td align="center">window</td><td align="center">缓冲区，用于暂时接受的数据，size的值为缓冲区剩余的值，window满了且未清空则不能接受数据了</td></tr></tbody></table><h3 id="常见标志位"><a href="#常见标志位" class="headerlink" title="常见标志位"></a>常见标志位</h3><ul><li>FIN：断开连接，对应值1</li><li>SYN：同步信号，用于连接，对应值2</li><li>RST：重置连接，对应值4</li><li>ACK：确认信息，对应值位16</li></ul><h3 id="扫描原理"><a href="#扫描原理" class="headerlink" title="扫描原理"></a>扫描原理</h3><ul><li>通过构造TCP 标志位(flags)为SYN的数据包，向目标主机端口请求连接</li><li>目标主机端口如果开放的话，收到SYN数据包请求建立三次握手，就会回复SYN+ACK同意建立连接。</li><li>判断目标主机响应数据包中是否存在SYN+ACK标志位存在</li></ul><h3 id="构造数据包"><a href="#构造数据包" class="headerlink" title="构造数据包"></a>构造数据包</h3><ul><li><p>在构造TCP数据包时，可以通过不同的标志位来实现不同的效果</p></li><li><p>使用TCP SYN数据包探测目标主机是否开放80端口</p><ul><li>在构建数据包时，如果不手动指定字段值，scapy则会使用默认值。</li></ul><table><thead><tr><th align="center"><code>构造好之后可以show一下，查看是否正确</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200928164704.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table><table><thead><tr><th align="center"><code>发送数据包并查看响应</code></th></tr></thead><tbody><tr><td align="center"><code>如果端口开放则相应包的flags为SA允许建立连接，反之为RS拒绝连接</code></td></tr><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200928164807.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table></li></ul><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><ul><li>scapy库在python中并没有自带，需要手动安装，<code>pip install scapy</code></li><li>导入时建议使用<code>from scapy.all import *</code>来进行导入，其他的方法导入很麻烦</li></ul><h3 id="扫描函数"><a href="#扫描函数" class="headerlink" title="扫描函数"></a>扫描函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">ip,port</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        packet = IP(dst=ip)/TCP(dport=port, flags=<span class="string">&quot;S&quot;</span>)<span class="comment"># 构造标志位为syn的数据包</span></span><br><span class="line">        result = sr1(packet,timeout=<span class="number">0.5</span>, verbose=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(result[TCP].flags) == <span class="number">18</span>:</span><br><span class="line">            <span class="comment"># 通过判断响应的数据包中，是否存在第二次握手Ack+syn标志位，存在即端口开放</span></span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            <span class="built_in">print</span>(ip, <span class="string">&quot;TCP&quot;</span> , port, <span class="string">&quot;open&quot;</span>)</span><br><span class="line">            <span class="comment"># 注意这里如果使用+号进行字符串拼接的话会导致报错，使用逗号即可拼接</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参数获取"><a href="#参数获取" class="headerlink" title="参数获取"></a>参数获取</h3><ul><li><p>获取用户输入的参数，并实例化</p></li><li><p>判断用户是扫i单个ip地址还是网段亦是读取ip地址文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    parser = OptionParser(<span class="string">&quot;Usage program -i &lt;target host&gt; -n &lt;website&gt; -p &lt;target port&gt;&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-i&quot;</span>, <span class="string">&#x27;--host&#x27;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,dest=<span class="string">&quot;tgtIP&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;specify target host or website&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-n&quot;</span>,<span class="string">&quot;--network&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,dest=<span class="string">&quot;tgtNetwork&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;specify target Network&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--addressfile&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>, dest=<span class="string">&quot;tgtFile&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;specify target addressfile&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-p&quot;</span>,<span class="string">&quot;--port&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,dest=<span class="string">&quot;tgtPorts&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;specify target port separated by comma&quot;</span>)</span><br><span class="line">    options,args = parser.parse_args()<span class="comment"># 实例化用户输入的参数</span></span><br><span class="line"></span><br><span class="line">    tgtIP = options.tgtIP</span><br><span class="line">    tgtNetwork = options.tgtNetwork <span class="comment"># 网段</span></span><br><span class="line">    tgtFile = options.tgtFile</span><br><span class="line">    tgtPorts = options.tgtPorts</span><br><span class="line">  tgtPorts = tgtPorts.split(<span class="string">&quot;,&quot;</span>) <span class="comment"># 将用户输入的多个端口以逗号分割生成列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtPorts <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> tgtNetwork <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> tgtIP <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> tgtFile <span class="keyword">is</span> <span class="literal">None</span>  :<span class="comment"># 判断用户是否输入参数</span></span><br><span class="line">        <span class="built_in">print</span>(parser.usage)<span class="comment"># 如果没有输入参数则输出帮助信息，然后退出程序</span></span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtIP:<span class="comment"># 输入单个ip地址时的操作</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> tgtPorts:</span><br><span class="line">            port = <span class="built_in">int</span>(p)</span><br><span class="line">            t = Thread(target=scan,args=(tgtIP,port))</span><br><span class="line">            t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtNetwork:<span class="comment"># 输入整个网段时的操作</span></span><br><span class="line">        prefix = tgtNetwork.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;.&quot;</span> + tgtNetwork.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;.&quot;</span> + tgtNetwork.split(<span class="string">&quot;.&quot;</span>)[<span class="number">2</span>] + <span class="string">&quot;.&quot;</span><span class="comment"># 将用户输入的网段提取提取前三位当作前缀</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">            ip = prefix + <span class="built_in">str</span>(i)<span class="comment"># 和前缀结合形成网段内所有的地址</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> tgtPorts:</span><br><span class="line">                port = <span class="built_in">int</span>(p)</span><br><span class="line">                t = Thread(target=scan, args=(ip,port))</span><br><span class="line">                t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtFile:<span class="comment"># 如果时地址文件则进行的操作</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(tgtFile):<span class="comment"># 判断文件是否存在</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;File not found&quot;</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(tgtFile,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:<span class="comment"># 读取地址文件</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">                ip = i.strip()<span class="comment"># 读取用户地址文件的地址，并去点换行空格</span></span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> tgtPorts:</span><br><span class="line">                    port = p.strip()</span><br><span class="line">                    port = <span class="built_in">int</span>(port)</span><br><span class="line">                    t = Thread(target=scan,args=(ip,port))</span><br><span class="line">                    t.start()<span class="comment"># 多线程扫描</span></span><br><span class="line"></span><br><span class="line">     </span><br></pre></td></tr></table></figure></li></ul><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">ip,port</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        packet = IP(dst=ip)/TCP(dport=port, flags=<span class="string">&quot;S&quot;</span>)<span class="comment"># 构造标志位为syn的数据包</span></span><br><span class="line">        result = sr1(packet,timeout=<span class="number">0.5</span>, verbose=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(result[TCP].flags) == <span class="number">18</span>:</span><br><span class="line">            <span class="comment"># 通过判断响应的数据包中，是否存在第二次握手Ack+syn标志位，存在即端口开放</span></span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            <span class="built_in">print</span>(ip, <span class="string">&quot;TCP&quot;</span> , port, <span class="string">&quot;open&quot;</span>)</span><br><span class="line">            <span class="comment"># 注意这里如果使用+号进行字符串拼接的话会导致报错，使用逗号即可拼接</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    parser = OptionParser(<span class="string">&quot;Usage program -i &lt;target host&gt; -n &lt;website&gt; -p &lt;target port&gt;&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-i&quot;</span>, <span class="string">&#x27;--host&#x27;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,dest=<span class="string">&quot;tgtIP&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;specify target host or website&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-n&quot;</span>,<span class="string">&quot;--network&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,dest=<span class="string">&quot;tgtNetwork&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;specify target Network&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--addressfile&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>, dest=<span class="string">&quot;tgtFile&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;specify target addressfile&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-p&quot;</span>,<span class="string">&quot;--port&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,dest=<span class="string">&quot;tgtPorts&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;specify target port separated by comma&quot;</span>)</span><br><span class="line">    options,args = parser.parse_args()<span class="comment"># 实例化用户输入的参数</span></span><br><span class="line"></span><br><span class="line">    tgtIP = options.tgtIP</span><br><span class="line">    tgtNetwork = options.tgtNetwork <span class="comment"># 网段</span></span><br><span class="line">    tgtFile = options.tgtFile</span><br><span class="line">    tgtPorts = options.tgtPorts</span><br><span class="line">  tgtPorts = tgtPorts.split(<span class="string">&quot;,&quot;</span>) <span class="comment"># 将用户输入的多个端口以逗号分割生成列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtPorts <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> tgtNetwork <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> tgtIP <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> tgtFile <span class="keyword">is</span> <span class="literal">None</span>  :<span class="comment"># 判断用户是否输入参数</span></span><br><span class="line">        <span class="built_in">print</span>(parser.usage)<span class="comment"># 如果没有输入参数则输出帮助信息，然后退出程序</span></span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtIP:<span class="comment"># 输入单个ip地址时的操作</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> tgtPorts:</span><br><span class="line">            port = <span class="built_in">int</span>(p)</span><br><span class="line">            t = Thread(target=scan,args=(tgtIP,port))</span><br><span class="line">            t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtNetwork:<span class="comment"># 输入整个网段时的操作</span></span><br><span class="line">        prefix = tgtNetwork.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;.&quot;</span> + tgtNetwork.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;.&quot;</span> + tgtNetwork.split(<span class="string">&quot;.&quot;</span>)[<span class="number">2</span>] + <span class="string">&quot;.&quot;</span><span class="comment"># 将用户输入的网段提取提取前三位当作前缀</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">            ip = prefix + <span class="built_in">str</span>(i)<span class="comment"># 和前缀结合形成网段内所有的地址</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> tgtPorts:</span><br><span class="line">                port = <span class="built_in">int</span>(p)</span><br><span class="line">                t = Thread(target=scan, args=(ip,port))</span><br><span class="line">                t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtFile:<span class="comment"># 如果时地址文件则进行的操作</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(tgtFile):<span class="comment"># 判断文件是否存在</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;File not found&quot;</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(tgtFile,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:<span class="comment"># 读取地址文件</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">                ip = i.strip()<span class="comment"># 读取用户地址文件的地址，并去点换行空格</span></span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> tgtPorts:</span><br><span class="line">                    port = p.strip()</span><br><span class="line">                    port = <span class="built_in">int</span>(port)</span><br><span class="line">                    t = Thread(target=scan,args=(ip,port))</span><br><span class="line">                    t.start()<span class="comment"># 多线程扫描</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><table><thead><tr><th align="center"><code>python3 tcp_portscan -n 172.18.9.0/24 -p 80</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200928193558.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python-Scapy-构造TCP数据包实现扫描端口&quot;&gt;&lt;a href=&quot;#Python-Scapy-构造TCP数据包实现扫描端口&quot; class=&quot;headerlink&quot; title=&quot;Python+Scapy 构造TCP数据包实现扫描端口&quot;&gt;&lt;/a&gt;Pytho</summary>
      
    
    
    
    
    <category term="Develop" scheme="http://example.com/tags/Develop/"/>
    
  </entry>
  
</feed>
