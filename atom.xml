<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>suqier&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-21T10:07:39.037Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>suqier</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>送东阳马生序</title>
    <link href="http://example.com/2022/02/21/%E9%80%81%E4%B8%9C%E9%98%B3%E9%A9%AC%E7%94%9F%E5%BA%8F/"/>
    <id>http://example.com/2022/02/21/%E9%80%81%E4%B8%9C%E9%98%B3%E9%A9%AC%E7%94%9F%E5%BA%8F/</id>
    <published>2022-02-21T09:15:55.000Z</published>
    <updated>2022-02-21T10:07:39.037Z</updated>
    
    <content type="html"><![CDATA[<p>宋濂　明</p><p>余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。</p><p>既加冠，益慕圣贤之道，又患无硕师、名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。</p><p>当余之从师也，尝负笈曳屣，行深山巨谷中。穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四肢僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴珠缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，煜然若神人。余则缊袍敝衣处其间，略无慕艳意。以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？</p><p>今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵《诗》《书》，无奔走之劳矣；有司业、博士为之师，未有问而不告、求而不得者也；凡所宜有之书，皆集于此，不必若余之手录、假诸人而后见也。其业有不精、德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！</p><p>东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达；与之论辩，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣。其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知予者哉！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;宋濂　明&lt;/p&gt;
&lt;p&gt;余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。&lt;/p&gt;
&lt;p&gt;既加冠，益慕圣贤之道，又患无硕师、名人与游，尝趋百里外，从乡之先</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python+Scapy实现TCP端口扫描</title>
    <link href="http://example.com/2020/09/15/Python+Scapy_%E5%AE%9E%E7%8E%B0TCP%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <id>http://example.com/2020/09/15/Python+Scapy_%E5%AE%9E%E7%8E%B0TCP%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/</id>
    <published>2020-09-15T06:19:48.000Z</published>
    <updated>2022-02-21T10:07:39.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-Scapy-构造TCP数据包实现扫描端口"><a href="#Python-Scapy-构造TCP数据包实现扫描端口" class="headerlink" title="Python+Scapy 构造TCP数据包实现扫描端口"></a>Python+Scapy 构造TCP数据包实现扫描端口</h1><h3 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h3><ul><li>面向连接的：使用TCP协议通信的双方必须先建立连接，然后才能开始数据的读写，TCP连接是全双工的，即双方的数据读写可以通过一个连接进行。完成数据交换之后，通信双方都必须断开 连接以释放资源。TCP协议的这种连接是一对一的，所以基于广播和多播（目标是多个主机地址) 的应用程序不能使用TCP。而无连接协议UDP则非常适合于广播和多播。</li><li>流式服务：TCP的字节流服务的表现形式就体现在，发送端执行的写操作数和接收端执行的读操作次数之间没有任何数量关系，当发送端应用程序连续执行多次写操作的时，TCP模块先将这些数据放入TCP发送缓冲区中。当TCP模块真正开始发送数据的时候，发送缓冲区中这些等待发送的数据可能被封装成一个或多个TCP报文段发出。</li><li>TCP通过检验和，序列号，确认应答，重发控制，连接管理以及窗口控制等机制实现可靠性传输。</li></ul><h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><ul><li>所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发<br>送3个包。三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，<br>交换 TCP 窗口大小信息。在 socket 编程中，客户端执行 connect() 时。将触发三次握手。</li><li>第一次握手(SYN&#x3D;1, seq&#x3D;x):客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器<br>的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。<br>发送完毕后，客户端进入 SYN_SEND 状态。</li><li>第二次握手(SYN&#x3D;1, ACK&#x3D;1, seq&#x3D;y, ACKnum&#x3D;x+1):服务器发回确认包(ACK)应答。即 SYN 标志位和<br>  ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)<br>  设置为客户的 ISN 加1，即X+1。 发送完毕后，服务器端进入 SYN_RCVD 状态。</li><li>第三次握手(ACK&#x3D;1，ACKnum&#x3D;y+1)客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，<br>  并且把服务器发来ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1发送完<br>  毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束。</li></ul><table><thead><tr><th align="center"><code>三次握手图视</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200928190555.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table><h3 id="TCP类字段解释"><a href="#TCP类字段解释" class="headerlink" title="TCP类字段解释"></a>TCP类字段解释</h3><ul><li>在scapy中查看TCP类可用的函数<table><thead><tr><th align="center"><code>使用ls(xxx)可以来查看某个协议类中的函数</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200928160856.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table></li></ul><table><thead><tr><th align="center">字段</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center">sport</td><td align="center">源端口，接受数据类为整数型</td></tr><tr><td align="center">dport</td><td align="center">目的端口，接受数据类为整数型</td></tr><tr><td align="center">seq</td><td align="center">tcp三次握手中的序号，如果刚发送TCP数据包，从第0位开始则seq为0</td></tr><tr><td align="center">ack</td><td align="center">同上，如果是第一个数据包的话，则ack同样为零</td></tr><tr><td align="center">flags</td><td align="center">TCP标志位，总共有六个ACK&#x2F;SYN&#x2F;RST&#x2F;URG&#x2F;PSH&#x2F;FIN, 关于标志位的介绍可以看这里<a href="https://blog.csdn.net/qq_38323666/article/details/85338477">https://blog.csdn.net/qq_38323666/article/details/85338477</a></td></tr><tr><td align="center">window</td><td align="center">缓冲区，用于暂时接受的数据，size的值为缓冲区剩余的值，window满了且未清空则不能接受数据了</td></tr></tbody></table><h3 id="常见标志位"><a href="#常见标志位" class="headerlink" title="常见标志位"></a>常见标志位</h3><ul><li>FIN：断开连接，对应值1</li><li>SYN：同步信号，用于连接，对应值2</li><li>RST：重置连接，对应值4</li><li>ACK：确认信息，对应值位16</li></ul><h3 id="扫描原理"><a href="#扫描原理" class="headerlink" title="扫描原理"></a>扫描原理</h3><ul><li>通过构造TCP 标志位(flags)为SYN的数据包，向目标主机端口请求连接</li><li>目标主机端口如果开放的话，收到SYN数据包请求建立三次握手，就会回复SYN+ACK同意建立连接。</li><li>判断目标主机响应数据包中是否存在SYN+ACK标志位存在</li></ul><h3 id="构造数据包"><a href="#构造数据包" class="headerlink" title="构造数据包"></a>构造数据包</h3><ul><li><p>在构造TCP数据包时，可以通过不同的标志位来实现不同的效果</p></li><li><p>使用TCP SYN数据包探测目标主机是否开放80端口</p><ul><li>在构建数据包时，如果不手动指定字段值，scapy则会使用默认值。</li></ul><table><thead><tr><th align="center"><code>构造好之后可以show一下，查看是否正确</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200928164704.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table><table><thead><tr><th align="center"><code>发送数据包并查看响应</code></th></tr></thead><tbody><tr><td align="center"><code>如果端口开放则相应包的flags为SA允许建立连接，反之为RS拒绝连接</code></td></tr><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200928164807.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table></li></ul><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><ul><li>scapy库在python中并没有自带，需要手动安装，<code>pip install scapy</code></li><li>导入时建议使用<code>from scapy.all import *</code>来进行导入，其他的方法导入很麻烦</li></ul><h3 id="扫描函数"><a href="#扫描函数" class="headerlink" title="扫描函数"></a>扫描函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">ip,port</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        packet = IP(dst=ip)/TCP(dport=port, flags=<span class="string">&quot;S&quot;</span>)<span class="comment"># 构造标志位为syn的数据包</span></span><br><span class="line">        result = sr1(packet,timeout=<span class="number">0.5</span>, verbose=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(result[TCP].flags) == <span class="number">18</span>:</span><br><span class="line">            <span class="comment"># 通过判断响应的数据包中，是否存在第二次握手Ack+syn标志位，存在即端口开放</span></span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            <span class="built_in">print</span>(ip, <span class="string">&quot;TCP&quot;</span> , port, <span class="string">&quot;open&quot;</span>)</span><br><span class="line">            <span class="comment"># 注意这里如果使用+号进行字符串拼接的话会导致报错，使用逗号即可拼接</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参数获取"><a href="#参数获取" class="headerlink" title="参数获取"></a>参数获取</h3><ul><li><p>获取用户输入的参数，并实例化</p></li><li><p>判断用户是扫i单个ip地址还是网段亦是读取ip地址文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    parser = OptionParser(<span class="string">&quot;Usage program -i &lt;target host&gt; -n &lt;website&gt; -p &lt;target port&gt;&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-i&quot;</span>, <span class="string">&#x27;--host&#x27;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,dest=<span class="string">&quot;tgtIP&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;specify target host or website&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-n&quot;</span>,<span class="string">&quot;--network&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,dest=<span class="string">&quot;tgtNetwork&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;specify target Network&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--addressfile&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>, dest=<span class="string">&quot;tgtFile&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;specify target addressfile&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-p&quot;</span>,<span class="string">&quot;--port&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,dest=<span class="string">&quot;tgtPorts&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;specify target port separated by comma&quot;</span>)</span><br><span class="line">    options,args = parser.parse_args()<span class="comment"># 实例化用户输入的参数</span></span><br><span class="line"></span><br><span class="line">    tgtIP = options.tgtIP</span><br><span class="line">    tgtNetwork = options.tgtNetwork <span class="comment"># 网段</span></span><br><span class="line">    tgtFile = options.tgtFile</span><br><span class="line">    tgtPorts = options.tgtPorts</span><br><span class="line">  tgtPorts = tgtPorts.split(<span class="string">&quot;,&quot;</span>) <span class="comment"># 将用户输入的多个端口以逗号分割生成列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtPorts <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> tgtNetwork <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> tgtIP <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> tgtFile <span class="keyword">is</span> <span class="literal">None</span>  :<span class="comment"># 判断用户是否输入参数</span></span><br><span class="line">        <span class="built_in">print</span>(parser.usage)<span class="comment"># 如果没有输入参数则输出帮助信息，然后退出程序</span></span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtIP:<span class="comment"># 输入单个ip地址时的操作</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> tgtPorts:</span><br><span class="line">            port = <span class="built_in">int</span>(p)</span><br><span class="line">            t = Thread(target=scan,args=(tgtIP,port))</span><br><span class="line">            t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtNetwork:<span class="comment"># 输入整个网段时的操作</span></span><br><span class="line">        prefix = tgtNetwork.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;.&quot;</span> + tgtNetwork.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;.&quot;</span> + tgtNetwork.split(<span class="string">&quot;.&quot;</span>)[<span class="number">2</span>] + <span class="string">&quot;.&quot;</span><span class="comment"># 将用户输入的网段提取提取前三位当作前缀</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">            ip = prefix + <span class="built_in">str</span>(i)<span class="comment"># 和前缀结合形成网段内所有的地址</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> tgtPorts:</span><br><span class="line">                port = <span class="built_in">int</span>(p)</span><br><span class="line">                t = Thread(target=scan, args=(ip,port))</span><br><span class="line">                t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtFile:<span class="comment"># 如果时地址文件则进行的操作</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(tgtFile):<span class="comment"># 判断文件是否存在</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;File not found&quot;</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(tgtFile,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:<span class="comment"># 读取地址文件</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">                ip = i.strip()<span class="comment"># 读取用户地址文件的地址，并去点换行空格</span></span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> tgtPorts:</span><br><span class="line">                    port = p.strip()</span><br><span class="line">                    port = <span class="built_in">int</span>(port)</span><br><span class="line">                    t = Thread(target=scan,args=(ip,port))</span><br><span class="line">                    t.start()<span class="comment"># 多线程扫描</span></span><br><span class="line"></span><br><span class="line">     </span><br></pre></td></tr></table></figure></li></ul><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> scapy.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> optparse <span class="keyword">import</span> OptionParser</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">ip,port</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        packet = IP(dst=ip)/TCP(dport=port, flags=<span class="string">&quot;S&quot;</span>)<span class="comment"># 构造标志位为syn的数据包</span></span><br><span class="line">        result = sr1(packet,timeout=<span class="number">0.5</span>, verbose=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(result[TCP].flags) == <span class="number">18</span>:</span><br><span class="line">            <span class="comment"># 通过判断响应的数据包中，是否存在第二次握手Ack+syn标志位，存在即端口开放</span></span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            <span class="built_in">print</span>(ip, <span class="string">&quot;TCP&quot;</span> , port, <span class="string">&quot;open&quot;</span>)</span><br><span class="line">            <span class="comment"># 注意这里如果使用+号进行字符串拼接的话会导致报错，使用逗号即可拼接</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">    parser = OptionParser(<span class="string">&quot;Usage program -i &lt;target host&gt; -n &lt;website&gt; -p &lt;target port&gt;&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-i&quot;</span>, <span class="string">&#x27;--host&#x27;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,dest=<span class="string">&quot;tgtIP&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;specify target host or website&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-n&quot;</span>,<span class="string">&quot;--network&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,dest=<span class="string">&quot;tgtNetwork&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;specify target Network&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--addressfile&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>, dest=<span class="string">&quot;tgtFile&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;specify target addressfile&quot;</span>)</span><br><span class="line">    parser.add_option(<span class="string">&quot;-p&quot;</span>,<span class="string">&quot;--port&quot;</span>, <span class="built_in">type</span>=<span class="string">&quot;string&quot;</span>,dest=<span class="string">&quot;tgtPorts&quot;</span>,<span class="built_in">help</span>=<span class="string">&quot;specify target port separated by comma&quot;</span>)</span><br><span class="line">    options,args = parser.parse_args()<span class="comment"># 实例化用户输入的参数</span></span><br><span class="line"></span><br><span class="line">    tgtIP = options.tgtIP</span><br><span class="line">    tgtNetwork = options.tgtNetwork <span class="comment"># 网段</span></span><br><span class="line">    tgtFile = options.tgtFile</span><br><span class="line">    tgtPorts = options.tgtPorts</span><br><span class="line">  tgtPorts = tgtPorts.split(<span class="string">&quot;,&quot;</span>) <span class="comment"># 将用户输入的多个端口以逗号分割生成列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtPorts <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> tgtNetwork <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> tgtIP <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> tgtFile <span class="keyword">is</span> <span class="literal">None</span>  :<span class="comment"># 判断用户是否输入参数</span></span><br><span class="line">        <span class="built_in">print</span>(parser.usage)<span class="comment"># 如果没有输入参数则输出帮助信息，然后退出程序</span></span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtIP:<span class="comment"># 输入单个ip地址时的操作</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> tgtPorts:</span><br><span class="line">            port = <span class="built_in">int</span>(p)</span><br><span class="line">            t = Thread(target=scan,args=(tgtIP,port))</span><br><span class="line">            t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtNetwork:<span class="comment"># 输入整个网段时的操作</span></span><br><span class="line">        prefix = tgtNetwork.split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>] + <span class="string">&quot;.&quot;</span> + tgtNetwork.split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>] + <span class="string">&quot;.&quot;</span> + tgtNetwork.split(<span class="string">&quot;.&quot;</span>)[<span class="number">2</span>] + <span class="string">&quot;.&quot;</span><span class="comment"># 将用户输入的网段提取提取前三位当作前缀</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">255</span>):</span><br><span class="line">            ip = prefix + <span class="built_in">str</span>(i)<span class="comment"># 和前缀结合形成网段内所有的地址</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> tgtPorts:</span><br><span class="line">                port = <span class="built_in">int</span>(p)</span><br><span class="line">                t = Thread(target=scan, args=(ip,port))</span><br><span class="line">                t.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tgtFile:<span class="comment"># 如果时地址文件则进行的操作</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(tgtFile):<span class="comment"># 判断文件是否存在</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;File not found&quot;</span>)</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(tgtFile,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:<span class="comment"># 读取地址文件</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">                ip = i.strip()<span class="comment"># 读取用户地址文件的地址，并去点换行空格</span></span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> tgtPorts:</span><br><span class="line">                    port = p.strip()</span><br><span class="line">                    port = <span class="built_in">int</span>(port)</span><br><span class="line">                    t = Thread(target=scan,args=(ip,port))</span><br><span class="line">                    t.start()<span class="comment"># 多线程扫描</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><table><thead><tr><th align="center"><code>python3 tcp_portscan -n 172.18.9.0/24 -p 80</code></th></tr></thead><tbody><tr><td align="center"><img src="https://lynn-sec-blogimage.oss-cn-shenzhen.aliyuncs.com/img/20200928193558.png?x-oss-process=style/suqier-logo"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python-Scapy-构造TCP数据包实现扫描端口&quot;&gt;&lt;a href=&quot;#Python-Scapy-构造TCP数据包实现扫描端口&quot; class=&quot;headerlink&quot; title=&quot;Python+Scapy 构造TCP数据包实现扫描端口&quot;&gt;&lt;/a&gt;Pytho</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="scapy" scheme="http://example.com/tags/scapy/"/>
    
  </entry>
  
</feed>
